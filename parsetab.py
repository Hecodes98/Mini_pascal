
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSOLUTE AMPERSANT AND ARRAY ASM BEGIN BOOLEAN BREAK CASE CHAR CLRSCR COLON COMMA CONST CONSTRUCTOR DEQUAL DESTRUCTOR DISTINT DIVIDE DO DOT DOWNTO ELSE END EQUAL FALSE FILE FOR FUNCTION GOTO GREATER GREATEREQUAL HASHTAG ID IF IMPLEMENTATION IN INHERITED INLINE INTEGER INTERFACE ISEQUAL LABEL LBLOCK LBRACKET LESS LESSEQUAL LONG LPAREN MINUS MINUSMINUS MOD NIL NOT NUMBER OBJECT OF OPERATOR OR PACKED PLUS PLUSPLUS PROCEDURE PROGRAM RBLOCK RBRACKET READLN REAL RECORD REINTRODUCE REPEAT RPAREN SELF SEMICOLON SET SHL SHR STRING TEXT THEN TIMES TO TRUE TYPE UNIT UNTIL USES VAR WHILE WITH WRITE WRITELN XORprogram : declaration_listdeclaration_list : declaration_list  declarationdeclaration_list : declarationdeclaration : header_declaration\n                            | var_declaration\n                            | procedure_declarationheader_declaration : PROGRAM ID SEMICOLONheader_declaration : USES ID header_declaration_3 SEMICOLONheader_declaration_3 : COMMA ID header_declaration_3 \n                                                | emptyvar_declaration : VAR var_declaration_2var_declaration_2 : ID var_declaration_3 COLON type_specifier SEMICOLON var_declaration_4var_declaration_3 : COMMA ID var_declaration_3 \n                                            | emptyvar_declaration_4 : var_declaration_2 \n                                    | emptyempty :type_specifier : INTEGERtype_specifier : REALtype_specifier : CHARtype_specifier : BOOLEANprocedure_declaration : BEGIN instruction END DOTinstruction : asignation instruction\n                        | writing instruction\n                        | cycles instruction\n                                    | emptyinstruction_one_line : asignation\n                        | writing\n                        | cycleswriting : WRITELN LPAREN TEXT RPAREN SEMICOLON\n                | WRITELN LPAREN id_num RPAREN SEMICOLON   writing : WRITELN SEMICOLONasignation : ID EQUAL id_num SEMICOLONasignation_for : ID EQUAL id_numcycles : type_cycletype_cycle : while\n                    | if \n                    | for \n                    | cycles instructionwhile : WHILE internexpression op_cycle DO otherBeginif : IF internexpression op_cycle THEN otherBegin_if \n            | IF internexpression op_cycle THEN instruction_one_line\n            | IF internexpression op_cycle THEN otherBegin_if ELSE otherBegin\n            | IF internexpression op_cycle THEN otherBegin_if ELSE instruction_one_line\n            | IF internexpression op_cycle THEN instruction_one_line ELSE otherBegin\n            | IF internexpression op_cycle THEN instruction_one_line ELSE instruction_one_linefor : FOR asignation_for TO id_num DO otherBegin\n            | FOR asignation_for DOWNTO id_num DO otherBeginop_cycle : op_logic internexpression op_cycle\n                                        | emptyinternexpression : parenthesesinternexpression : expressionparentheses : LPAREN expression RPARENexpression : ID type_op IDid_num : NUMBER\n                | IDexpression : id_num type_op id_numexpression : id_numexpression : id_num type_op_math id_num ISEQUAL id_numtype_op : LESSEQUALtype_op : LESStype_op : GREATERtype_op : GREATEREQUALtype_op : ISEQUALtype_op : DEQUALtype_op : DISTINTtype_op_math : PLUStype_op_math : MINUStype_op_math : TIMEStype_op_math : DIVIDEtype_op_math : MODop_logic : ANDop_logic : ORop_logic : XORop_logic : NOTotherBegin : BEGIN instruction END SEMICOLON instructionotherBegin_if : BEGIN instruction END instruction'
    
_lr_action_items = {'REAL':([88,],[104,]),'THEN':([30,32,33,35,36,43,60,82,84,90,92,94,95,110,126,],[-51,-58,-55,-52,-56,-17,-50,-56,102,-17,-57,-53,-54,-49,-59,]),'DO':([30,31,32,33,35,36,58,60,82,90,92,94,95,96,97,110,126,],[-51,-17,-58,-55,-52,-56,91,-50,-56,-17,-57,-53,-54,114,115,-49,-59,]),'TEXT':([41,],[80,]),'EQUAL':([18,39,],[42,79,]),'CHAR':([88,],[106,]),'LESSEQUAL':([32,33,36,],[71,-55,71,]),'WHILE':([2,12,13,14,15,21,22,23,24,37,40,45,46,101,102,111,112,116,117,118,119,120,121,122,123,127,128,130,131,132,137,138,139,140,141,142,143,144,],[11,-37,-38,11,-26,11,-35,-36,11,-24,-32,-23,-25,-33,11,11,-40,-30,-31,11,-28,-42,-27,-41,11,-48,-47,11,11,-39,11,-46,-45,-44,-43,11,-77,-76,]),'PROGRAM':([0,1,3,4,5,8,25,28,50,85,87,124,133,134,135,],[9,-4,-6,9,-5,-3,-2,-11,-7,-22,-8,-17,-12,-15,-16,]),'USES':([0,1,3,4,5,8,25,28,50,85,87,124,133,134,135,],[7,-4,-6,7,-5,-3,-2,-11,-7,-22,-8,-17,-12,-15,-16,]),'TIMES':([32,33,36,],[72,-55,-56,]),'XOR':([30,31,32,33,35,36,43,82,90,92,94,95,126,],[-51,55,-58,-55,-52,-56,55,-56,55,-57,-53,-54,-59,]),'MINUS':([32,33,36,],[67,-55,-56,]),'DOT':([44,],[85,]),'BEGIN':([0,1,3,4,5,8,25,28,50,85,87,91,102,114,115,124,130,131,133,134,135,],[2,-4,-6,2,-5,-3,-2,-11,-7,-22,-8,111,118,111,111,-17,111,111,-12,-15,-16,]),'RPAREN':([32,33,36,75,80,81,82,92,95,126,],[-58,-55,-56,94,99,100,-56,-57,-54,-59,]),'SEMICOLON':([17,26,27,33,48,49,82,83,86,99,100,103,104,105,106,107,108,136,],[40,-17,50,-55,87,-10,-56,101,-17,116,117,-9,-19,124,-20,-21,-18,142,]),'LESS':([32,33,36,],[63,-55,63,]),'PLUS':([32,33,36,],[68,-55,-56,]),'TO':([33,38,82,98,],[-55,78,-56,-34,]),'COLON':([29,51,53,89,109,],[-17,88,-14,-17,-13,]),'COMMA':([26,29,86,89,],[47,52,47,52,]),'$end':([1,3,4,5,6,8,25,28,50,85,87,124,133,134,135,],[-4,-6,-1,-5,0,-3,-2,-11,-7,-22,-8,-17,-12,-15,-16,]),'END':([2,12,13,14,15,20,21,22,23,24,37,40,45,46,101,111,112,116,117,118,119,120,121,122,123,125,127,128,129,132,137,138,139,140,141,142,143,144,],[-17,-37,-38,-17,-26,44,-17,-35,-36,-17,-24,-32,-23,-25,-33,-17,-40,-30,-31,-17,-28,-42,-27,-41,-17,136,-48,-47,137,-39,-17,-46,-45,-44,-43,-17,-77,-76,]),'DIVIDE':([32,33,36,],[74,-55,-56,]),'FOR':([2,12,13,14,15,21,22,23,24,37,40,45,46,101,102,111,112,116,117,118,119,120,121,122,123,127,128,130,131,132,137,138,139,140,141,142,143,144,],[16,-37,-38,16,-26,16,-35,-36,16,-24,-32,-23,-25,-33,16,16,-40,-30,-31,16,-28,-42,-27,-41,16,-48,-47,16,16,-39,16,-46,-45,-44,-43,16,-77,-76,]),'GREATEREQUAL':([32,33,36,],[61,-55,61,]),'NUMBER':([11,19,34,41,42,54,55,56,57,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,113,],[33,33,33,33,33,-72,-74,33,-75,-73,-63,-62,-61,33,-65,33,-68,-67,-71,-64,-60,-69,-66,-70,33,33,33,33,]),'WRITELN':([2,12,13,14,15,21,22,23,24,37,40,45,46,101,102,111,112,116,117,118,119,120,121,122,123,127,128,130,131,132,137,138,139,140,141,142,143,144,],[17,-37,-38,17,-26,17,-35,-36,17,-24,-32,-23,-25,-33,17,17,-40,-30,-31,17,-28,-42,-27,-41,17,-48,-47,17,17,-39,17,-46,-45,-44,-43,17,-77,-76,]),'LPAREN':([11,17,19,54,55,56,57,59,],[34,41,34,-72,-74,34,-75,-73,]),'INTEGER':([88,],[108,]),'VAR':([0,1,3,4,5,8,25,28,50,85,87,124,133,134,135,],[10,-4,-6,10,-5,-3,-2,-11,-7,-22,-8,-17,-12,-15,-16,]),'ELSE':([12,13,14,15,21,22,23,24,37,40,45,46,101,112,116,117,119,120,121,122,123,127,128,132,137,138,139,140,141,142,143,144,],[-37,-38,-17,-26,-17,-35,-36,-17,-24,-32,-23,-25,-33,-40,-30,-31,-28,130,-27,131,-17,-48,-47,-39,-17,-46,-45,-44,-43,-17,-77,-76,]),'ID':([2,7,9,10,11,12,13,14,15,16,19,21,22,23,24,34,37,40,41,42,45,46,47,52,54,55,56,57,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,101,102,111,112,113,116,117,118,119,120,121,122,123,124,127,128,130,131,132,137,138,139,140,141,142,143,144,],[18,26,27,29,36,-37,-38,18,-26,39,36,18,-35,-36,18,36,-24,-32,82,82,-23,-25,86,89,-72,-74,36,-75,-73,-63,-62,-61,82,-65,82,-68,-67,-71,-64,-60,-69,-66,-70,95,82,82,82,-33,18,18,-40,82,-30,-31,18,-28,-42,-27,-41,18,29,-48,-47,18,18,-39,18,-46,-45,-44,-43,18,-77,-76,]),'IF':([2,12,13,14,15,21,22,23,24,37,40,45,46,101,102,111,112,116,117,118,119,120,121,122,123,127,128,130,131,132,137,138,139,140,141,142,143,144,],[19,-37,-38,19,-26,19,-35,-36,19,-24,-32,-23,-25,-33,19,19,-40,-30,-31,19,-28,-42,-27,-41,19,-48,-47,19,19,-39,19,-46,-45,-44,-43,19,-77,-76,]),'AND':([30,31,32,33,35,36,43,82,90,92,94,95,126,],[-51,54,-58,-55,-52,-56,54,-56,54,-57,-53,-54,-59,]),'GREATER':([32,33,36,],[62,-55,62,]),'DEQUAL':([32,33,36,],[65,-55,65,]),'DISTINT':([32,33,36,],[73,-55,73,]),'DOWNTO':([33,38,82,98,],[-55,77,-56,-34,]),'BOOLEAN':([88,],[107,]),'ISEQUAL':([32,33,36,82,93,],[70,-55,70,-56,113,]),'NOT':([30,31,32,33,35,36,43,82,90,92,94,95,126,],[-51,57,-58,-55,-52,-56,57,-56,57,-57,-53,-54,-59,]),'OR':([30,31,32,33,35,36,43,82,90,92,94,95,126,],[-51,59,-58,-55,-52,-56,59,-56,59,-57,-53,-54,-59,]),'MOD':([32,33,36,],[69,-55,-56,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'otherBegin':([91,114,115,130,131,],[112,127,128,139,141,]),'id_num':([11,19,34,41,42,56,64,66,77,78,79,113,],[32,32,32,81,83,32,92,93,96,97,98,126,]),'asignation_for':([16,],[38,]),'header_declaration_3':([26,86,],[48,103,]),'if':([2,14,21,24,102,111,118,123,130,131,137,142,],[12,12,12,12,12,12,12,12,12,12,12,12,]),'type_specifier':([88,],[105,]),'for':([2,14,21,24,102,111,118,123,130,131,137,142,],[13,13,13,13,13,13,13,13,13,13,13,13,]),'type_op':([32,36,],[64,76,]),'internexpression':([11,19,56,],[31,43,90,]),'writing':([2,14,21,24,102,111,118,123,130,131,137,142,],[14,14,14,14,119,14,14,14,119,119,14,14,]),'var_declaration':([0,4,],[5,5,]),'op_logic':([31,43,90,],[56,56,56,]),'program':([0,],[6,]),'empty':([2,14,21,24,26,29,31,43,86,89,90,111,118,123,124,137,142,],[15,15,15,15,49,53,60,60,49,53,60,15,15,15,135,15,15,]),'header_declaration':([0,4,],[1,1,]),'var_declaration_4':([124,],[133,]),'var_declaration_2':([10,124,],[28,134,]),'var_declaration_3':([29,89,],[51,109,]),'instruction_one_line':([102,130,131,],[120,138,140,]),'cycles':([2,14,21,24,102,111,118,123,130,131,137,142,],[24,24,24,24,123,24,24,24,123,123,24,24,]),'declaration':([0,4,],[8,25,]),'op_cycle':([31,43,90,],[58,84,110,]),'parentheses':([11,19,56,],[30,30,30,]),'procedure_declaration':([0,4,],[3,3,]),'instruction':([2,14,21,24,111,118,123,137,142,],[20,37,45,46,125,129,132,143,144,]),'asignation':([2,14,21,24,102,111,118,123,130,131,137,142,],[21,21,21,21,121,21,21,21,121,121,21,21,]),'type_cycle':([2,14,21,24,102,111,118,123,130,131,137,142,],[22,22,22,22,22,22,22,22,22,22,22,22,]),'while':([2,14,21,24,102,111,118,123,130,131,137,142,],[23,23,23,23,23,23,23,23,23,23,23,23,]),'type_op_math':([32,],[66,]),'otherBegin_if':([102,],[122,]),'declaration_list':([0,],[4,]),'expression':([11,19,34,56,],[35,35,75,35,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','parser.py',10),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_1','parser.py',15),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list_2','parser.py',20),
  ('declaration -> header_declaration','declaration',1,'p_declaration','parser.py',25),
  ('declaration -> var_declaration','declaration',1,'p_declaration','parser.py',26),
  ('declaration -> procedure_declaration','declaration',1,'p_declaration','parser.py',27),
  ('header_declaration -> PROGRAM ID SEMICOLON','header_declaration',3,'p_header_declaration_1','parser.py',32),
  ('header_declaration -> USES ID header_declaration_3 SEMICOLON','header_declaration',4,'p_header_declaration_2','parser.py',37),
  ('header_declaration_3 -> COMMA ID header_declaration_3','header_declaration_3',3,'p_header_declaration_3','parser.py',42),
  ('header_declaration_3 -> empty','header_declaration_3',1,'p_header_declaration_3','parser.py',43),
  ('var_declaration -> VAR var_declaration_2','var_declaration',2,'p_var_declaration_1','parser.py',48),
  ('var_declaration_2 -> ID var_declaration_3 COLON type_specifier SEMICOLON var_declaration_4','var_declaration_2',6,'p_var_declaration_2','parser.py',53),
  ('var_declaration_3 -> COMMA ID var_declaration_3','var_declaration_3',3,'p_var_declaration_3','parser.py',58),
  ('var_declaration_3 -> empty','var_declaration_3',1,'p_var_declaration_3','parser.py',59),
  ('var_declaration_4 -> var_declaration_2','var_declaration_4',1,'p_var_declaration_4','parser.py',64),
  ('var_declaration_4 -> empty','var_declaration_4',1,'p_var_declaration_4','parser.py',65),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',70),
  ('type_specifier -> INTEGER','type_specifier',1,'p_type_specifier_1','parser.py',75),
  ('type_specifier -> REAL','type_specifier',1,'p_type_specifier_3','parser.py',80),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier_4','parser.py',85),
  ('type_specifier -> BOOLEAN','type_specifier',1,'p_type_specifier_5','parser.py',90),
  ('procedure_declaration -> BEGIN instruction END DOT','procedure_declaration',4,'p_procedure_declaration','parser.py',95),
  ('instruction -> asignation instruction','instruction',2,'p_instruction','parser.py',100),
  ('instruction -> writing instruction','instruction',2,'p_instruction','parser.py',101),
  ('instruction -> cycles instruction','instruction',2,'p_instruction','parser.py',102),
  ('instruction -> empty','instruction',1,'p_instruction','parser.py',103),
  ('instruction_one_line -> asignation','instruction_one_line',1,'p_instruction_one_line','parser.py',108),
  ('instruction_one_line -> writing','instruction_one_line',1,'p_instruction_one_line','parser.py',109),
  ('instruction_one_line -> cycles','instruction_one_line',1,'p_instruction_one_line','parser.py',110),
  ('writing -> WRITELN LPAREN TEXT RPAREN SEMICOLON','writing',5,'p_writing_1','parser.py',115),
  ('writing -> WRITELN LPAREN id_num RPAREN SEMICOLON','writing',5,'p_writing_1','parser.py',116),
  ('writing -> WRITELN SEMICOLON','writing',2,'p_writing_2','parser.py',121),
  ('asignation -> ID EQUAL id_num SEMICOLON','asignation',4,'p_asignation','parser.py',126),
  ('asignation_for -> ID EQUAL id_num','asignation_for',3,'p_asignation_for','parser.py',131),
  ('cycles -> type_cycle','cycles',1,'p_cycles','parser.py',136),
  ('type_cycle -> while','type_cycle',1,'p_type_cycle','parser.py',141),
  ('type_cycle -> if','type_cycle',1,'p_type_cycle','parser.py',142),
  ('type_cycle -> for','type_cycle',1,'p_type_cycle','parser.py',143),
  ('type_cycle -> cycles instruction','type_cycle',2,'p_type_cycle','parser.py',144),
  ('while -> WHILE internexpression op_cycle DO otherBegin','while',5,'p_while','parser.py',149),
  ('if -> IF internexpression op_cycle THEN otherBegin_if','if',5,'p_if','parser.py',154),
  ('if -> IF internexpression op_cycle THEN instruction_one_line','if',5,'p_if','parser.py',155),
  ('if -> IF internexpression op_cycle THEN otherBegin_if ELSE otherBegin','if',7,'p_if','parser.py',156),
  ('if -> IF internexpression op_cycle THEN otherBegin_if ELSE instruction_one_line','if',7,'p_if','parser.py',157),
  ('if -> IF internexpression op_cycle THEN instruction_one_line ELSE otherBegin','if',7,'p_if','parser.py',158),
  ('if -> IF internexpression op_cycle THEN instruction_one_line ELSE instruction_one_line','if',7,'p_if','parser.py',159),
  ('for -> FOR asignation_for TO id_num DO otherBegin','for',6,'p_for','parser.py',164),
  ('for -> FOR asignation_for DOWNTO id_num DO otherBegin','for',6,'p_for','parser.py',165),
  ('op_cycle -> op_logic internexpression op_cycle','op_cycle',3,'p_op_cycle','parser.py',170),
  ('op_cycle -> empty','op_cycle',1,'p_op_cycle','parser.py',171),
  ('internexpression -> parentheses','internexpression',1,'p_internexpression_1','parser.py',175),
  ('internexpression -> expression','internexpression',1,'p_internexpression_2','parser.py',180),
  ('parentheses -> LPAREN expression RPAREN','parentheses',3,'p_parentheses','parser.py',185),
  ('expression -> ID type_op ID','expression',3,'p_expression_1','parser.py',190),
  ('id_num -> NUMBER','id_num',1,'p_id_num','parser.py',195),
  ('id_num -> ID','id_num',1,'p_id_num','parser.py',196),
  ('expression -> id_num type_op id_num','expression',3,'p_expression_2','parser.py',200),
  ('expression -> id_num','expression',1,'p_expression_5','parser.py',205),
  ('expression -> id_num type_op_math id_num ISEQUAL id_num','expression',5,'p_expression_6','parser.py',210),
  ('type_op -> LESSEQUAL','type_op',1,'p_type_op_1','parser.py',215),
  ('type_op -> LESS','type_op',1,'p_type_op_2','parser.py',220),
  ('type_op -> GREATER','type_op',1,'p_type_op_3','parser.py',225),
  ('type_op -> GREATEREQUAL','type_op',1,'p_type_op_4','parser.py',230),
  ('type_op -> ISEQUAL','type_op',1,'p_type_op_5','parser.py',235),
  ('type_op -> DEQUAL','type_op',1,'p_type_op_6','parser.py',240),
  ('type_op -> DISTINT','type_op',1,'p_type_op_7','parser.py',245),
  ('type_op_math -> PLUS','type_op_math',1,'p_type_op_math_1','parser.py',250),
  ('type_op_math -> MINUS','type_op_math',1,'p_type_op_math_2','parser.py',255),
  ('type_op_math -> TIMES','type_op_math',1,'p_type_op_math_3','parser.py',260),
  ('type_op_math -> DIVIDE','type_op_math',1,'p_type_op_math_4','parser.py',265),
  ('type_op_math -> MOD','type_op_math',1,'p_type_op_math_5','parser.py',270),
  ('op_logic -> AND','op_logic',1,'p_op_logic_1','parser.py',275),
  ('op_logic -> OR','op_logic',1,'p_op_logic_2','parser.py',280),
  ('op_logic -> XOR','op_logic',1,'p_op_logic_3','parser.py',285),
  ('op_logic -> NOT','op_logic',1,'p_op_logic_4','parser.py',290),
  ('otherBegin -> BEGIN instruction END SEMICOLON instruction','otherBegin',5,'p_otherBegin','parser.py',295),
  ('otherBegin_if -> BEGIN instruction END instruction','otherBegin_if',4,'p_otherBegin_if','parser.py',300),
]
